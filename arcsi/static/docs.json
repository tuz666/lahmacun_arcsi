{
  "openapi": "3.0.0",
  "info": {
    "description": "Arcsi API doc",
    "version": "0.5.0",
    "title": "Arcsi",
    "contact": {
      "email": "it@lahmacun.hu"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/arcsi/"
    }
  ],
  "tags": [
    {
      "name": "User Request",
      "description": "API for requesting and return User details"
    },
    {
      "name": "Show Request",
      "description": "API for requesting and return Show details"
    },
    {
      "name": "Item Request",
      "description": "API for requesting and return Item details"
    }
  ],
  "paths": {
    "/user/all": {
      "get": {
        "tags": [
          "User Request"
        ],
        "summary": "Return all User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/UserRequests"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the user that we want to match",
          "schema": {
            "$ref": "#/components/schemas/id"
          }
        }
      ],
      "get": {
        "tags": [
          "User Request"
        ],
        "summary": "Get User with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the user that we want to get",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "404": {
            "description": "Failed. User not found."
          }
        }
      }
    },
    "/show/all": {
      "get": {
        "tags": [
          "Show Request"
        ],
        "summary": "Return all Show",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ShowRequests"
            }
          }
        }
      }
    },
    "/show/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the show that we want to match",
          "schema": {
            "$ref": "#/components/schemas/id"
          }
        }
      ],
      "get": {
        "tags": [
          "Show Request"
        ],
        "summary": "Get Show with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the show that we want to get",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ShowRequest"
            }
          },
          "404": {
            "description": "Failed. Show not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Show Request"
        ],
        "summary": "Delete Show with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the show that we want to delete",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "404": {
            "description": "Failed. Show not found."
          },
          "500": {
            "description": "UNDOCUMENTED"
          }
        }
      },
      "post": {
        "tags": [
          "Show Request"
        ],
        "summary": "Edit Show with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID of the show that we want to edit",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "requestBody": {
          "description": "Show Request Object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ShowRequest"
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Show not found!"
          },
          "405": {
            "description": "UNDOCUMENTED!"
          },
          "500": {
            "description": "Invalid data sent to edit show!"
          }
        }
      }
    },
    "/show/{slug}/archive": {
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "description": "Lahmastore base URL of the Show that we want to match",
          "schema": {
            "$ref": "#/components/schemas/url"
          }
        }
      ],
      "get": {
        "tags": [
          "Show Request"
        ],
        "summary": "Get Show with given URL",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "description": "Item Request URL",
            "schema": {
              "$ref": "#/components/schemas/url"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "404": {
            "description": "Failed. Show not found."
          }
        }
      }
    },
    "/show/add": {
      "post": {
        "tags": [
          "Show Request"
        ],
        "summary": "Add a new Show",
        "requestBody": {
          "description": "Show Request Post Object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewShowRequest"
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/NewShowRequest"
            }
          },
          "500": {
            "description": "Invalid data sent to add show, see:"
          },
          "503": {
            "description": "Only accepts multipart/form-data for now, sorry"
          }
        }
      }
    },
    "/item": {
      "post": {
        "tags": [
          "Item Request"
        ],
        "summary": "Add a new Item",
        "requestBody": {
          "description": "Item Request",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "500": {
            "description": "Invalid data sent to add item, see: "
          },
          "503": {
            "description": "Only accepts multipart/form-data for now, sorry"
          }
        }
      }
    },
    "/item/all": {
      "get": {
        "tags": [
          "Item Request"
        ],
        "summary": "Return all Item",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          }
        }
      }
    },
    "/item/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the Item that we want to match",
          "schema": {
            "$ref": "#/components/schemas/id"
          }
        }
      ],
      "get": {
        "tags": [
          "Item Request"
        ],
        "summary": "Get Item with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Item Request ID",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ItemRequest"
            }
          },
          "404": {
            "description": "Failed. Item not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Item Request"
        ],
        "summary": "Delete Item with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Item Request ID",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          "404": {
            "description": "Failed. Item not found."
          },
          "500": {
            "description": "UNDOCUMENTED!"
          }
        }
      },
      "post": {
        "tags": [
          "Item Request"
        ],
        "summary": "Edit Item with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Item Request ID",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "requestBody": {
          "description": "Item Request",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ItemRequest"
              }
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Item not found."
          },
          "500": {
            "description": "Invalid data sent to edit item!"
          }
        }
      }
    },
    "/item/{id}/listen": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the Item that we want to listen",
          "schema": {
            "$ref": "#/components/schemas/id"
          }
        }
      ],
      "get": {
        "tags": [
          "Item Request"
        ],
        "summary": "Listen Item with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Item Request ID",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/url",
              "example": "https://custom-listen-url.example.com/stream.mp3"
            }
          },
          "404": {
            "description": "Failed. Item not found."
          },
          "500": {
            "description": "UNDOCUMENTED!!"
          }
        }
      }
    },
    "/item/{id}/download": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the Item that we want to download",
          "schema": {
            "$ref": "#/components/schemas/id"
          }
        }
      ],
      "get": {
        "tags": [
          "Item Request"
        ],
        "summary": "Download Item with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Item Request ID",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Item not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "id": {
        "type": "integer",
        "format": "int32"
      },
      "url": {
        "type": "string"
      },
      "user": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "show": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "item": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "play_date": {
            "type": "string",
            "format": "date"
          },
          "image_url": {
            "$ref": "#/components/schemas/url"
          },
          "archived": {
            "type": "boolean"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "active": {
            "type": "boolean"
          },
          "butt_user": {
            "type": "string"
          },
          "butt_pw": {
            "type": "string",
            "format": "password"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "shows": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/show"
            }
          },
          "roles": {
            "type": "string"
          }
        }
      },
      "UserRequestPostBody": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "active": {
            "type": "boolean"
          },
          "butt_user": {
            "type": "string"
          },
          "butt_pw": {
            "type": "string",
            "format": "password"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "roles": {
            "type": "string"
          }
        }
      },
      "UserRequests": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/UserRequest"
        }
      },
      "ShowRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "playlist_name": {
            "type": "string"
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "week": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "archive_lahmastore": {
            "type": "boolean"
          },
          "archive_mixcloud": {
            "type": "boolean"
          },
          "users": {
            "$ref": "#/components/schemas/id"
          },
          "user_name": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "image_file": {
            "type": "file"
          }
        }
      },
      "NewShowRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "playlist_name": {
            "type": "string"
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "week": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "archive_lahmastore": {
            "type": "boolean"
          },
          "archive_mixcloud": {
            "type": "boolean"
          },
          "users": {
            "$ref": "#/components/schemas/id"
          },
          "user_name": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "image_file": {
            "type": "file"
          }
        }
      },
      "ShowRequests": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ShowRequest"
        }
      },
      "ItemRequest": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "play_date": {
            "type": "string",
            "format": "date"
          },
          "live": {
            "type": "boolean"
          },
          "broadcast": {
            "type": "boolean"
          },
          "archive_lahmastore": {
            "type": "boolean"
          },
          "archive_mixcloud": {
            "type": "boolean"
          },
          "uploader": {
            "type": "string"
          },
          "shows": {
            "type": "integer",
            "format": "int32"
          },
          "show_name": {
            "type": "string"
          },
          "image_file": {
            "type": "file"
          },
          "play_file": {
            "type": "file"
          }
        }
      }
    }
  }
}